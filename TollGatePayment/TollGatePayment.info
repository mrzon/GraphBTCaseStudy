<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.be.graphbt.model="http://graphbt/1.0">
  <org.be.graphbt.model:RequirementList>
    <requirements Key="R1" Requirement="Initialization phase" Description="System initialize its communication with server by giving necessary credentials"/>
    <requirements Key="R2" Requirement="Receive acknowledgment" Description="If System receive acknowledgment it will continue the work, if not, it ends the execution"/>
    <requirements Key="R3" Requirement="Check to server every 2 seconds" Description="System check to server every 2 seconds to check whether there is a new open gate request or not."/>
    <requirements Key="R4" Requirement="Get open request" Description="If there exists open gate request, then the gate opens."/>
    <requirements Key="R5" Requirement="Gate closing" Description="The gate closed after 20 seconds and wait check the server again. "/>
  </org.be.graphbt.model:RequirementList>
  <org.be.graphbt.model:Libraries>
    <import name="Display" desc="This component can be used to show GUI of the Model" location="files/lib/dist/com.util.pc.gui/" id="com.util.pc.gui">
      <methods name="registerComponent" type="Unit">
        <parameters name="str" type="String"/>
        <parameters name="w" type="Component"/>
      </methods>
      <methods name="removeComponent" type="Unit">
        <parameters name="key" type=""/>
      </methods>
      <methods name="getComponent" type="Component">
        <parameters name="" type=""/>
      </methods>
    </import>
    <import name="Timer" desc="This component can be used as a Timer" location="files/lib/dist/com.util.pc.timer/" id="com.util.pc.timer">
      <methods name="start" type="Unit"/>
      <methods name="stop" type="Unit"/>
      <methods name="timeout" type="Bool"/>
      <methods name="addMinute" type="Unit">
        <parameters name="m" type="Int"/>
      </methods>
      <methods name="addSecond" type="Unit">
        <parameters name="s" type="Int"/>
      </methods>
      <methods name="addHour" type="Unit">
        <parameters name="h" type="Int"/>
      </methods>
      <states name="START" ref="S0" desc="Indicating that the timer is started"/>
      <states name="TIMEOUT" ref="S1" desc="The condition that the timer already timeout">
        <attributes>
          <info key="TIMEOUT" value="0"/>
        </attributes>
      </states>
      <behaviors behaviorName="START" behaviorRef="0" behaviorDesc="Start the timer" technicalDetail="timer_var!start();"/>
      <behaviors behaviorType="Guard" behaviorName="timeout" behaviorRef="1" behaviorDesc="Check whether the timeout is true" technicalDetail="Fut&lt;Bool> b = timer_var!timeout();await b?;timeout_var = b.get;"/>
      <attributes type="Int" name="duration" value="5"/>
    </import>
  </org.be.graphbt.model:Libraries>
  <org.be.graphbt.model:ComponentList>
    <components componentName="APICommunicator" componentRef="C1" componentDesc="This component do communication with server">
      <attributes type="Int" name="duration" value="5"/>
      <behaviors behaviorName="init" behaviorRef="1" behaviorDesc="This behavior inits all the required behavior to communicate with server such as credentials."/>
      <behaviors behaviorType="Guard" behaviorName="waitingresponse" behaviorRef="2" behaviorDesc="A guard to mark whether a response is received or not."/>
      <behaviors behaviorName="requestpost" behaviorRef="3" behaviorDesc="Send the data to the server"/>
      <behaviors behaviorType="Selection" behaviorName="acknowledged" behaviorRef="5" behaviorDesc=""/>
      <behaviors behaviorName="requestget" behaviorRef="6" behaviorDesc="Send a get request"/>
      <behaviors behaviorName="setcheckopengaterequest" behaviorRef="4" behaviorDesc="Set parameter to check open gate"/>
      <behaviors behaviorName="processresponse" behaviorRef="7" behaviorDesc="Processing response, whether there is open gate request or not, or whether the request failed or not."/>
      <behaviors behaviorType="Selection" behaviorName="shouldopen" behaviorRef="8" behaviorDesc="Selection to check whether it should open or not."/>
      <behaviors behaviorType="Selection" behaviorName="not(shouldopen)" behaviorRef="9" behaviorDesc="Selection whether the door should not be open."/>
    </components>
    <components componentName="Gate" componentRef="C2" componentDesc="Gate that used to be open and close.">
      <state name="open" ref="1" desc="The condition when the gate opens">
        <attributes/>
      </state>
      <state name="close" ref="2" desc="The condition when the gate closed.">
        <attributes/>
      </state>
      <behaviors behaviorName="open" behaviorRef="1" behaviorDesc="The open condition of the Gate"/>
      <behaviors behaviorName="close" behaviorRef="2" behaviorDesc="The close condition of the gate"/>
    </components>
    <components componentName="OpenGateRequestTimer" componentRef="C3" componentDesc="The timer to make open gate request every 5 seconds.">
      <attributes type="Int" name="duration" value="5"/>
      <state name="START" ref="S0" desc="Indicating that the timer is started">
        <attributes/>
      </state>
      <state name="TIMEOUT" ref="S1" desc="The condition that the timer already timeout">
        <attributes/>
      </state>
      <behaviors behaviorName="START" behaviorRef="0" behaviorDesc="Start the timer" technicalDetail="timer_var!addMinute(20);&#xD;&#xA;timer_var!start();"/>
      <behaviors behaviorType="Guard" behaviorName="timeout" behaviorRef="1" behaviorDesc="Check whether the timeout is true" technicalDetail="Fut&lt;Bool> b = timer_var!timeout();&#xD;&#xA;await b?;&#xD;&#xA;timeout_var = b.get;"/>
      <uses name="Timer" desc="This component can be used as a Timer" location="files/lib/dist/com.util.pc.timer/" id="com.util.pc.timer">
        <methods name="start" type="Unit"/>
        <methods name="stop" type="Unit"/>
        <methods name="timeout" type="Bool"/>
        <methods name="addMinute" type="Unit">
          <parameters name="m" type="Int"/>
        </methods>
        <methods name="addSecond" type="Unit">
          <parameters name="s" type="Int"/>
        </methods>
        <methods name="addHour" type="Unit">
          <parameters name="h" type="Int"/>
        </methods>
        <states name="START" ref="S0" desc="Indicating that the timer is started"/>
        <states name="TIMEOUT" ref="S1" desc="The condition that the timer already timeout">
          <attributes>
            <info key="TIMEOUT" value="0"/>
          </attributes>
        </states>
        <behaviors behaviorName="START" behaviorRef="0" behaviorDesc="Start the timer" technicalDetail="timer_var!start();"/>
        <behaviors behaviorType="Guard" behaviorName="timeout" behaviorRef="1" behaviorDesc="Check whether the timeout is true" technicalDetail="Fut&lt;Bool> b = timer_var!timeout();await b?;timeout_var = b.get;"/>
        <attributes type="Int" name="duration" value="5"/>
      </uses>
    </components>
    <components componentName="CloseGateTimer" componentRef="C4" componentDesc="Timer to close the gate after it is opened. The waiting time is 20 seconds.">
      <attributes type="Int" name="duration" value="5"/>
      <state name="START" ref="S0" desc="Indicating that the timer is started">
        <attributes/>
      </state>
      <state name="TIMEOUT" ref="S1" desc="The condition that the timer already timeout">
        <attributes/>
      </state>
      <behaviors behaviorName="START" behaviorRef="0" behaviorDesc="Start the timer" technicalDetail="timer_var!addMinute(20);&#xD;&#xA;timer_var!start();"/>
      <behaviors behaviorType="Guard" behaviorName="timeout" behaviorRef="1" behaviorDesc="Check whether the timeout is true" technicalDetail="Fut&lt;Bool> b = timer_var!timeout();await b?;timeout_var = b.get;"/>
      <uses name="Timer" desc="This component can be used as a Timer" location="files/lib/dist/com.util.pc.timer/" id="com.util.pc.timer">
        <methods name="start" type="Unit"/>
        <methods name="stop" type="Unit"/>
        <methods name="timeout" type="Bool"/>
        <methods name="addMinute" type="Unit">
          <parameters name="m" type="Int"/>
        </methods>
        <methods name="addSecond" type="Unit">
          <parameters name="s" type="Int"/>
        </methods>
        <methods name="addHour" type="Unit">
          <parameters name="h" type="Int"/>
        </methods>
        <states name="START" ref="S0" desc="Indicating that the timer is started"/>
        <states name="TIMEOUT" ref="S1" desc="The condition that the timer already timeout">
          <attributes>
            <info key="TIMEOUT" value="0"/>
          </attributes>
        </states>
        <behaviors behaviorName="START" behaviorRef="0" behaviorDesc="Start the timer" technicalDetail="timer_var!start();"/>
        <behaviors behaviorType="Guard" behaviorName="timeout" behaviorRef="1" behaviorDesc="Check whether the timeout is true" technicalDetail="Fut&lt;Bool> b = timer_var!timeout();await b?;timeout_var = b.get;"/>
        <attributes type="Int" name="duration" value="5"/>
      </uses>
    </components>
  </org.be.graphbt.model:ComponentList>
  <org.be.graphbt.model:FormulaList/>
  <org.be.graphbt.model:LayoutList/>
  <org.be.graphbt.model:MapInformation>
    <info key="name" value="TollGatePayment"/>
    <info key="version" value="v1.0"/>
    <info key="subtitle" value=" "/>
  </org.be.graphbt.model:MapInformation>
</xmi:XMI>
